(defun enum-divisors (n)
  (declare (optimize (speed 3))
           ((integer 1 #.most-positive-fixnum) n))
  (if (= n 1)
      (list 1)
      (let* ((root (isqrt n))
             (res (list 1)))
        (labels ((%enum (i former latter)
                   (declare ((integer 1 #.most-positive-fixnum) i))
                   (if (< root i)
                       (setf (cdr former) latter)
                       (multiple-value-bind (quot rem) (floor n i)
                         (if (zerop rem)
                             (progn
                               (setf (cdr former) (list i))
                               (setf latter (cons quot latter))
                               (%enum (1+ i) (cdr former) latter))
                             (%enum (1+ i) former latter)))))
                 (%enum-for-square (i former latter)
                   (declare ((integer 1 #.most-positive-fixnum) i))
                   (if (= root i)
                       (setf (cdr former) (cons i latter))
                       (multiple-value-bind (quot rem) (floor n i)
                         (if (zerop rem)
                             (progn
                               (setf (cdr former) (list i))
                               (setf latter (cons quot latter))
                               (%enum-for-square (1+ i) (cdr former) latter))
                             (%enum-for-square (1+ i) former latter))))))
          (if (= (* root root) n)
              (%enum-for-square 2 res (list n))
              (%enum 2 res (list n)))
          res))))
