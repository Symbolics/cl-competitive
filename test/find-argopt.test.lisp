(eval-when (:compile-toplevel :load-toplevel :execute)
  (load "test-util")
  (load "../find-argopt.lisp"))

(use-package :test-util)

(defun %find-argopt (sequence predicate &key (start 0) end (key #'identity))
  (multiple-value-list (find-argopt sequence predicate :start start :end end :key key)))

(with-test (:name find-argopt)
  (let ((lst '(3 2 3 4 5 2)))
    (assert (equalp '(1 2) (%find-argopt lst #'<)))
    (assert (equalp '(5 2) (%find-argopt lst #'<=)))
    (assert (equalp '(4 5) (%find-argopt lst #'>)))
    (assert (equalp '(5 2) (%find-argopt lst #'< :start 3)))
    (assert (equalp '(1 2) (%find-argopt lst #'< :start 1)))
    (assert (equalp '(1 2) (%find-argopt lst #'< :start 1 :end 4)))
    (assert (equalp '(5 2) (%find-argopt lst #'< :start 3)))
    (assert (equalp '(0 3) (%find-argopt lst #'< :end 1)))
    (assert (equalp '(1 2) (%find-argopt lst #'< :key #'1+)))
    (assert (equalp '(4 5) (%find-argopt lst #'< :key #'-)))
    (signals error (%find-argopt lst #'< :end 0))
    (signals error (%find-argopt lst #'< :start 7))
    (signals error (%find-argopt '() #'<)))
  (let ((vec #(3 2 3 4 5 2)))
    (assert (equalp '(1 2) (%find-argopt vec #'<)))
    (assert (equalp '(5 2) (%find-argopt vec #'<=)))
    (assert (equalp '(4 5) (%find-argopt vec #'>)))
    (assert (equalp '(5 2) (%find-argopt vec #'< :start 3)))
    (assert (equalp '(1 2) (%find-argopt vec #'< :start 1)))
    (assert (equalp '(1 2) (%find-argopt vec #'< :start 1 :end 4)))
    (assert (equalp '(5 2) (%find-argopt vec #'< :start 3)))
    (assert (equalp '(0 3) (%find-argopt vec #'< :end 1)))
    (assert (equalp '(1 2) (%find-argopt vec #'< :key #'1+)))
    (assert (equalp '(4 5) (%find-argopt vec #'< :key #'-)))
    (signals error (%find-argopt vec #'< :end 0))
    (signals error (%find-argopt vec #'< :start 7))
    (signals error (%find-argopt #() #'<))))
