(eval-when (:compile-toplevel :load-toplevel :execute)
  (load "test-util")
  (load "../bitset.lisp"))

(use-package :test-util)

(defparameter *seq* #*1011100001000000001110000000000000000001100000000000010000000001000000000000000000000001)
(defparameter *seq+1* #*0101110000100000000111000000000000000000110000000000001000000000100000000000000000000000)
(defparameter *seq+2* #*0010111000010000000011100000000000000000011000000000000100000000010000000000000000000000)
(defparameter *seq+3* #*0001011100001000000001110000000000000000001100000000000010000000001000000000000000000000)
(defparameter *seq+4* #*0000101110000100000000111000000000000000000110000000000001000000000100000000000000000000)
(defparameter *seq+5* #*0000010111000010000000011100000000000000000011000000000000100000000010000000000000000000)
(defparameter *seq+10* #*0000000000101110000100000000111000000000000000000110000000000001000000000100000000000000)
(defparameter *seq+15* #*0000000000000001011100001000000001110000000000000000001100000000000010000000001000000000)
(defparameter *seq+20* #*0000000000000000000010111000010000000011100000000000000000011000000000000100000000010000)
(defparameter *seq+25* #*0000000000000000000000000101110000100000000111000000000000000000110000000000001000000000)
(defparameter *seq+30* #*0000000000000000000000000000001011100001000000001110000000000000000001100000000000010000)
(defparameter *seq+40* #*0000000000000000000000000000000000000000101110000100000000111000000000000000000110000000)
(defparameter *seq+50* #*0000000000000000000000000000000000000000000000000010111000010000000011100000000000000000)
(defparameter *seq+60* #*0000000000000000000000000000000000000000000000000000000000001011100001000000001110000000)
(defparameter *seq+65* #*0000000000000000000000000000000000000000000000000000000000000000010111000010000000011100)
(defparameter *seq+70* #*0000000000000000000000000000000000000000000000000000000000000000000000101110000100000000)
(defparameter *seq+80* #*0000000000000000000000000000000000000000000000000000000000000000000000000000000010111000)
(defparameter *seq+87* #*0000000000000000000000000000000000000000000000000000000000000000000000000000000000000001)
(defparameter *seq+88* #*0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)

(defparameter *seq+1end0* #*0011100001000000001110000000000000000001100000000000010000000001000000000000000000000001)
(defparameter *seq+1end1* #*0111100001000000001110000000000000000001100000000000010000000001000000000000000000000001)
(defparameter *seq+1end2* #*0101100001000000001110000000000000000001100000000000010000000001000000000000000000000001)
(defparameter *seq+1end86* #*0101110000100000000111000000000000000000110000000000001000000000100000000000000000000001)
(defparameter *seq+1end87* #*0101110000100000000111000000000000000000110000000000001000000000100000000000000000000000)

(defun zero-vector (template-vector)
  (make-array (length template-vector) :element-type 'bit :initial-element 0))

(with-test (:name bit-lshift)
  ;; basic case
  (assert (equalp *seq+1* (bit-lshift (copy-seq *seq*) 1)))
  (assert (equalp *seq+1* (bit-lshift *seq* 1 (zero-vector *seq*))))
  (assert (equalp *seq+2* (bit-lshift *seq* 2 (zero-vector *seq*))))
  (assert (equalp *seq+3* (bit-lshift *seq* 3 (zero-vector *seq*))))
  (assert (equalp *seq+4* (bit-lshift *seq* 4 (zero-vector *seq*))))
  (assert (equalp *seq+5* (bit-lshift *seq* 5 (zero-vector *seq*))))
  (assert (equalp *seq+10* (bit-lshift *seq* 10 (zero-vector *seq*))))
  (assert (equalp *seq+15* (bit-lshift *seq* 15 (zero-vector *seq*))))
  (assert (equalp *seq+20* (bit-lshift *seq* 20 (zero-vector *seq*))))
  (assert (equalp *seq+25* (bit-lshift *seq* 25 (zero-vector *seq*))))
  (assert (equalp *seq+30* (bit-lshift *seq* 30 (zero-vector *seq*))))
  (assert (equalp *seq+40* (bit-lshift *seq* 40 (zero-vector *seq*))))
  (assert (equalp *seq+50* (bit-lshift *seq* 50 (zero-vector *seq*))))
  (assert (equalp *seq+60* (bit-lshift *seq* 60 (zero-vector *seq*))))
  (assert (equalp *seq+65* (bit-lshift *seq* 65 (zero-vector *seq*))))
  (assert (equalp *seq+70* (bit-lshift *seq* 70 (zero-vector *seq*))))
  (assert (equalp *seq+80* (bit-lshift *seq* 80 (zero-vector *seq*))))
  (assert (equalp *seq+87* (bit-lshift *seq* 87 (zero-vector *seq*))))
  (assert (equalp *seq+88* (bit-lshift *seq* 88 (zero-vector *seq*))))
  (assert (equalp *seq+88* (bit-lshift *seq* 89 (zero-vector *seq*))))
  (assert (equalp *seq+88* (bit-lshift *seq* 890 (zero-vector *seq*))))
  (assert (equalp *seq+88* (bit-lshift *seq* 8900000000000000 (zero-vector *seq*))))

   ;; corner case
  (assert (eql *seq* (bit-lshift *seq* 0 t)))
  (assert (not (eql *seq* (bit-lshift *seq* 0))))
  (assert (equalp #* (bit-lshift *seq* 1000000000000000000 #*)))
  (assert (equalp #* (bit-lshift #* 1000000000000000000 #*)))
  (assert (equalp #*00000 (bit-lshift #* 1000000000000000000 (copy-seq #*00010))))
  (assert (equalp #*00010 (bit-lshift #* 3 (copy-seq #*00010))))
  (assert (equalp #*00000 (bit-lshift #* 4 (copy-seq #*00010))))
  (assert (equalp #*10010 (bit-lshift #*1 0 (copy-seq #*00010))))
  (assert (equalp #*00000 (bit-lshift #*1 5 (copy-seq #*00010))))

  ;; END argument
  (assert (equalp *seq+1end0* (bit-lshift *seq* 1 (copy-seq *seq*) 0)))
  (assert (equalp *seq+1end1* (bit-lshift *seq* 1 (copy-seq *seq*) 1)))
  (assert (equalp *seq+1end2* (bit-lshift *seq* 1 (copy-seq *seq*) 2)))
  (assert (equalp *seq+1end86* (bit-lshift *seq* 1 (copy-seq *seq*) 86)))
  (assert (equalp *seq+1end87* (bit-lshift *seq* 1 (copy-seq *seq*) 87)))

  ;; smaller dest-vector
  (assert (equalp #*01011 (bit-lshift *seq* 1 #*00000)))
  (assert (equalp #*00001 (bit-lshift *seq* 4 #*00000)))
  (assert (equalp #*00000 (bit-lshift *seq* 1000000000000000000 #*00000))))
