(eval-when (:compile-toplevel :load-toplevel :execute)
  (load "test-util")
  (load "../rolling-hash62.lisp"))

(use-package :test-util)

(with-test (:name rolling-hash)
  (let ((rhash1 (make-rhash "asddfddfd" 1000000007 1000000009 :base1 1729 :base2 10007)))
    (assert (= (rhash-query rhash1 2 6) (rhash-query rhash1 5 9)))
    (assert (= (rhash-query rhash1 2 2) (rhash-query rhash1 5 5)))
    (assert (/= (rhash-query rhash1 2 6) (rhash-query rhash1 3 7)))
    (assert (= (rhash-concat rhash1 (rhash-query rhash1 0 2) (rhash-query rhash1 5 8) 3)
               (rhash-query rhash1 0 5)))
    (signals error (make-rhash "error" 1000000006 1000000009 :base1 1729 :base2 10007))
    (make-rhash "no error" 17 1000000009 :base1 11 :base2 10007)
    (signals error (make-rhash "error" 17 1000000009 :base1 19 :base2 10007))
    (signals error (make-rhash "error" 17 1000000009 :base1 17 :base2 10007))
    (signals error (make-rhash "error" 17 1000000009 :base1 0 :base2 10007))

    ;; longest common prefix
    (assert (= 0 (rhash-get-lcp rhash1 0 rhash1 3)))
    (assert (= 1 (rhash-get-lcp rhash1 2 rhash1 3)))
    (assert (= 0 (rhash-get-lcp rhash1 2 rhash1 4)))
    (assert (= 4 (rhash-get-lcp rhash1 2 rhash1 5)))
    (assert (= 7 (rhash-get-lcp rhash1 2 rhash1 2)))))
