(eval-when (:compile-toplevel :load-toplevel :execute)
  (load "test-util")
  (load "../deque.lisp"))

(use-package :test-util)

(with-test (:name deque)
  (let ((deque (make-deque 4)))
    (assert (deque-empty-p deque))
    (deque-push-front 1 deque)
    (deque-push-back 2 deque)
    (deque-push-back 3 deque)
    (deque-push-front 4 deque)
    (signals deque-full-error (deque-push-front 0 deque))
    (assert (= 4 (deque-pop-front deque)))
    (assert (= 1 (deque-pop-front deque)))
    (assert (= 2 (deque-pop-front deque)))
    (deque-push-front 5 deque)
    (assert (not (deque-empty-p deque)))
    (assert (= 3 (deque-pop-back deque)))
    (assert (= 5 (deque-pop-back deque)))
    (signals deque-empty-error (deque-pop-back deque))
    (assert (deque-empty-p deque))
    (deque-push-back 10 deque)
    (deque-reinitialize deque)
    (assert (deque-empty-p deque))))
